// I2C device class (I2Cdev) demonstration Arduino sketch for MPU6050 class
// Code adapted from the examples for the MPU6050 at https://github.com/jrowberg/i2cdevlib
#include "I2Cdev.h"
#include "MPU6050.h"

// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation
// is used in I2Cdev.h
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
#include "Wire.h"
#endif

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 accelGyro;
//MPU6050 accelGyro(0x69); // <-- use for AD0 high

int16_t aX, aY, aZ;
int16_t gX, gY, gZ;

#define STX "\x02"                      //ASCII-Code 02, text representation of the STX code
#define ETX "\x03"                      //ASCII-Code 03, text representation of the ETX code

// uncomment "OUTPUT_READABLE_ACCELGYRO" if you want to see a tab-separated
// list of the accel X/Y/Z and then gyro X/Y/Z values in decimal. Easy to read,
// not so easy to parse, and slow(er) over UART.
#define OUTPUT_READABLE_ACCELGYRO

// uncomment "OUTPUT_BINARY_ACCELGYRO" to send all 6 axes of data as 16-bit
// binary, one right after the other. This is very fast (as fast as possible
// without compression or data loss), and easy to parse, but impossible to read
// for a human.
//#define OUTPUT_BINARY_ACCELGYRO

#define LED_PIN 13
bool blinkState = false;

// (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
// it's really up to you depending on your project)
#define BAUD_RATE 9600

void setup() {
  // join I2C bus (I2Cdev library doesn't do this automatically)
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  Wire.begin();
#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
  Fastwire::setup(400, true);
#endif

  // initialize serial communication
  Serial.begin(BAUD_RATE);

  // initialize device
  Serial.println("Initializing I2C devices...");
  accelGyro.initialize();

  // verify connection
  Serial.println("Testing device connections...");
  Serial.println(accelGyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");

  // Set gyro/accel offsets.
  SetOffsets();

  Serial.println("Updating internal sensor offsets...");
  // -76	-2359	1688	0	0	0
  Serial.print(accelGyro.getXAccelOffset()); Serial.print("\t"); // -76
  Serial.print(accelGyro.getYAccelOffset()); Serial.print("\t"); // -2359
  Serial.print(accelGyro.getZAccelOffset()); Serial.print("\t"); // 1688
  Serial.print(accelGyro.getXGyroOffset());  Serial.print("\t"); // 0
  Serial.print(accelGyro.getYGyroOffset());  Serial.print("\t"); // 0
  Serial.print(accelGyro.getZGyroOffset());  Serial.print("\t"); // 0
  Serial.print("\n");
  /*accelgyro.setXGyroOffset(220);
   accelgyro.setYGyroOffset(76);
   accelgyro.setZGyroOffset(-85);
   Serial.print(accelgyro.getXAccelOffset()); Serial.print("\t"); // -76
   Serial.print(accelgyro.getYAccelOffset()); Serial.print("\t"); // -2359
   Serial.print(accelgyro.getZAccelOffset()); Serial.print("\t"); // 1688
   Serial.print(accelgyro.getXGyroOffset()); Serial.print("\t"); // 0
   Serial.print(accelgyro.getYGyroOffset()); Serial.print("\t"); // 0
   Serial.print(accelgyro.getZGyroOffset()); Serial.print("\t"); // 0
   Serial.print("\n");
   */

  // configure Arduino LED for
  pinMode(LED_PIN, OUTPUT);
}

void loop() {
  String command = "";  // Used to store the latest received command
  int serialResult = 0; // return value for reading operation method on serial in put buffer

  // read raw accel/gyro measurements from device
  accelGyro.getMotion6(&aX, &aY, &aZ, &gX, &gY, &gZ);
  
  // The read-in acceleration converted into 
  // units of gravitational force.
  float accelX = aX;
  float accelY = aY;
  float accelZ = aZ;
  float gyroX  = gX;
  float gyroY  = gY;
  float gyroZ  = gZ;
  
  ConvertToGravForce(&accelX, &accelY, &accelZ);
  GetGyroAngles(&gyroX, &gyroY, &gyroZ);
  
  // these methods (and a few others) are also available
  //accelGyro.getAcceleration(&ax, &ay, &az);
  //accelGyro.getRotation(&gx, &gy, &gz);

#ifdef OUTPUT_READABLE_ACCELGYRO
//  WriteData(ax, ay, az, gx, gy, gz);
#endif

#ifdef OUTPUT_BINARY_ACCELGYRO c
  WriteBinaryAccelGyro(ax, ay, az, gx, gy, gz);
#endif

  // blink LED to indicate activity
  blinkState = !blinkState;
  digitalWrite(LED_PIN, blinkState);
}

/*****************************************************************
 * Originally, the data was formatted as:
 * 
 * [STX]
 * <data here>[ETX]
 * 
 * Values written in braces ("[]") Represent an ASCII control
 * code. For further information about ASCII codes see http://www.asciitable.com
 ******************************************************************/
void WriteData(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz) {
  Serial.print(ax); 
  Serial.print("|");
  Serial.print(ay); 
  Serial.print("|");
  Serial.print(az); 
  Serial.print("|");
  Serial.print(gx); 
  Serial.print("|");
  Serial.print(gy); 
  Serial.print("|");
  Serial.println(gz);
}

/*
  Convert the provided raw x-, y-, and z-accelerometer readings
  into units of gravitational force.
  
  Adapted from the IMU guide at: http://www.starlino.com/imu_guide.html
*/
// TODO Rename this to a more accurate method name.
void ConvertToGravForce(float *agX, float *agY, float *agZ) {
  // TODO Just make VRef/ADCMaxValue a constant or something similar probably.
  // TODO The denominator of the below calculations is dependent on
  //      AFS_SEL value. Make a function that gets that information.
  // TODO ZeroGVoltage constant.
  // Reference voltage. Corresponds to VLOGIC in the
  // device data sheet. 1.8V +/- 5%.
  float VRef = 1.8f;
  float XVolts, YVolts, ZVolts;
  float ADCMaxValue = 65535;
  
  XVolts = ((*agX * VRef) / ADCMaxValue);
  YVolts = ((*agY * VRef) / ADCMaxValue);
  ZVolts = ((*agZ * VRef) / ADCMaxValue);

/*  Serial.print("Raw accel: [");
  Serial.print((*agX), 6); Serial.print(", ");
  Serial.print((*agY), 6); Serial.print(", ");
  Serial.print((*agZ), 6); Serial.println("]");
  
  Serial.print("Accel voltages: ");
  Serial.print(XVolts, 6); Serial.print(" V, ");
  Serial.print(YVolts, 6); Serial.print(" V, ");
  Serial.print(ZVolts, 6); Serial.println(" V]"); Serial.println();*/
  
  // TODO I need to find the zero-g voltage for the accel and input it here.
  float ZeroGVoltage = 0.0f;
  float XVoltsNoG = XVolts - ZeroGVoltage; 
  float YVoltsNoG = YVolts - ZeroGVoltage; 
  float ZVoltsNoG = ZVolts - ZeroGVoltage; 
/*
  Serial.print("Accel voltages: [w/o grav. force]");
  Serial.print(XVolts, 6); Serial.print(" V, ");
  Serial.print(YVolts, 6); Serial.print(" V, ");
  Serial.print(ZVolts, 6); Serial.println(" V]"); Serial.println();
*/

  // TODO Make a sensitivity function to use here, since it's dependent on the selected range.
  float XForceInG, YForceInG, ZForceInG;
  float Sensitivity = 16384.0f;
  XForceInG = XVoltsNoG / Sensitivity;
  YForceInG = YVoltsNoG / Sensitivity;
  ZForceInG = ZVoltsNoG / Sensitivity;

/*  Serial.print("Final force calc: [");
  Serial.print(XForceInG, 15); Serial.print(" g, ");
  Serial.print(YForceInG, 15); Serial.print(" g, ");
  Serial.print(ZForceInG, 15); Serial.println(" g]");*/
    
  float AccelXAngle, AccelYAngle, AccelZAngle, ForceMagnitude;
  ForceMagnitude = sqrt(sq(XForceInG) + sq(YForceInG) + sq(ZForceInG));

  // TODO I haven't actually verified that these calculations will work, the part where I change the sign.
  // acos doesn't give us information on the sign of the angle.
  AccelXAngle = (XForceInG >= 0 ? acos(XForceInG / ForceMagnitude) : - (acos(XForceInG / ForceMagnitude)));
  AccelYAngle = (YForceInG >= 0 ? acos(YForceInG / ForceMagnitude) : - (acos(YForceInG / ForceMagnitude)));
  AccelZAngle = (ZForceInG >= 0 ? acos(ZForceInG / ForceMagnitude) : - (acos(ZForceInG / ForceMagnitude)));
  
  printVector(AccelXAngle, AccelYAngle, AccelZAngle);

  Serial.print("[");
  Serial.print(AccelXAngle, 6); Serial.print(", ");
  Serial.print(AccelYAngle, 6); Serial.print(", ");
  Serial.print(AccelZAngle, 6); Serial.println("]");
}

void WriteData(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz) {
}


void WriteBinaryAccelGyro(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz) {
  Serial.write((uint8_t)(ax >> 8)); 
  Serial.write((uint8_t)(ax & 0xFF));
  Serial.write((uint8_t)(ay >> 8)); 
  Serial.write((uint8_t)(ay & 0xFF));
  Serial.write((uint8_t)(az >> 8)); 
  Serial.write((uint8_t)(az & 0xFF));
  Serial.write((uint8_t)(gx >> 8)); 
  Serial.write((uint8_t)(gx & 0xFF));
  Serial.write((uint8_t)(gy >> 8)); 
  Serial.write((uint8_t)(gy & 0xFF));
  Serial.write((uint8_t)(gz >> 8)); 
  Serial.write((uint8_t)(gz & 0xFF));
}

// These were experimentally determined by reading
// in a bunch of values with the unit stationary,
// and averaging them.
void SetOffsets() {
  accelGyro.setXAccelOffset(-10);
  accelGyro.setYAccelOffset(-288);//-850);
  accelGyro.setZAccelOffset(-439);
  // accelGyro.setXGyroOffset(14.4551);
  // accelGyro.setYGyroOffset(23.3734);
  // accelGyro.setZGyroOffset(74.0721);
}

